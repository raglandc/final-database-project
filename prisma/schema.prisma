// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Movies {
  MoviesID     Int     @id //@default(cuid())
  M_title      String
  M_overview   String?
  m_popularity Decimal @default(0.00)
  m_voteAvg    Decimal @default(0.00)
  m_voteCount  Int     @default(0)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String()
  access_token      String? @db.String()
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String()
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model actors {
  id         Int     @id @default(0)
  first_name String? @db.String()
  last_name  String? @db.String()
  gender     String? @db.Char(1)
  roles      roles[]

  // CockroachDB-specific annotations
  @@index([first_name], name: "actors_first_name")
  @@index([last_name], name: "actors_last_name")
}

model directors {
  id               Int                @id @default(0)
  first_name       String?            @db.String()
  last_name        String?            @db.String()
  directors_genres directors_genres[]
  movies_directors movies_directors[]

  @@index([first_name], name: "directors_first_name")
  @@index([last_name], name: "directors_last_name")
}

model directors_genres {
  director_id Int
  genre       String
  prob        Float?
  director    directors @relation(fields: [director_id], references: [id])

  @@id([director_id, genre])
  @@index([director_id], name: "directors_genres_director_id")
}

model movies {
  id               Int                @id
  name             String?
  year             Int?
  rank             Float?
  movies_directors movies_directors[]
  movies_genres    movies_genres[]
  roles            roles[]

  @@index([name], name: "movies_name")
}

model movies_directors {
  director_id Int
  movie_id    Int

  director directors @relation(fields: [director_id], references: [id])
  movie    movies    @relation(fields: [movie_id], references: [id])

  @@id([director_id, movie_id])
  @@index([director_id], name: "movies_directors_director_id")
  @@index([movie_id], name: "movies_directors_movie_id")
}

model movies_genres {
  movie_id Int
  genre    String

  movie movies @relation(fields: [movie_id], references: [id])

  @@id([movie_id, genre])
  @@index([movie_id], name: "movies_genres_movie_id")
}

model roles {
  actor_id Int
  movie_id Int
  role     String

  actor actors @relation(fields: [actor_id], references: [id])
  movie movies @relation(fields: [movie_id], references: [id])

  @@id([actor_id, movie_id, role])
  @@index([actor_id], name: "roles_actor_id")
  @@index([movie_id], name: "roles_movie_id")
}

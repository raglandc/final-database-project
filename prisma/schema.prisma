// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Movies {
  MoviesID       String           @id @unique @default(cuid())
  Poster_Link    String
  M_title        String
  Released_Year  Int?
  Certificate    String?
  Runtime        Int
  Genre          String[]
  IMDB_Rating    Decimal          @default(0.00) @db.Decimal(10, 2)
  M_overview     String?
  Meta_score     Int?
  Director       String
  Star1          String
  Star2          String
  Star3          String
  Star4          String
  m_voteCount    Int              @default(0)
  Gross          Int?
  UserLikes      UserLikes[]
  MovieWatchlist MovieWatchlist[]
}

model UserLikes {
  id      Int      @id @default(sequence())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  movie   Movies   @relation(fields: [movieId], references: [MoviesID])
  movieId String
  likedAt DateTime @default(now())
  rating  Int?
  review  String?
}

model MovieWatchlist {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  movie         Movies    @relation(fields: [movieId], references: [MoviesID]) // Updated reference field to MoviesID
  addedAt       DateTime  @default(now())
  rating        Int?
  review        String?
  watched       Boolean   @default(false)
  favorite      Boolean   @default(false)
  lastWatchedAt DateTime?
  userId        String
  movieId       String // Updated reference field to MoviesID
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String()
  access_token      String? @db.String()
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String()
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  UserLikes      UserLikes[]
  MovieWatchlist MovieWatchlist[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
